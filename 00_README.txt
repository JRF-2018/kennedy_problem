

    ケネディと天使の問題を Isabelle で証明 その１ うそつき天使問題
    (Created: 2020-06-22, Time-stamp: <2020-08-14T10:13:27Z>)


** 概要

ケネディと天使の問題、または、うそつき天使問題、気まぐれ天使問題、三人
の天使問題…と言われているものを、定理証明システム Isabelle でその答え
が正しいかチェック(証明)した。

これは「その１」で、うそつき天使問題を扱う。


** はじめに

野崎昭弘『詭弁論理学』(中公新書)の p.14-16, 148-154 に、「ケネディの問
題」というのが出てくる。

問題は次のようなものである。

> 凶弾に倒れた R. ケネディの魂が天に昇る途中で、白い翼の天使からこんな
> ことをおそわった。
> 
> 「あなたはもうすぐ、わかれ道につくでしょう。ひとつの道は天国に、もう
> ひとつの道は地獄に行く道です。そこにはふたりの人が立っていて、あなた
> はそのどちらかひとりに、一回だけ質問をすることができます。天国に行く
> 道がわかるように、上手に質問をしなさい」
> 
> ああそれはありがたい、とケネディが思っていると、天使は言葉を続けた。
>
> 「ふたりの人というのは、天使の姿になっているのであなたには区別できな
> いでしょうが、ひとりがチャーチルで、もうひとりはヒトラーです。チャー
> チルはいつでも本当のことをいいますが、ヒトラーはいつでも、必ずウソを
> つきます。あなたはそのどちらかに一回だけ、『はい』か『いいえ』で答え
> られる質問をしなければなりません。二回以上質問をしても、二人とも答え
> てくれませんよ。では、ご成功を祈ります」

これを聴いたケネディは一つの質問を思い付き、無事天国に行けたようである。
その質問とはどのようなものかというのが、この論理パズルの問題である。

答えはズバリ、「あなたは、『この(右の)道が天国に行く道ですか』ときかれ
たら、『はい』と答えますか？」というもの。

似た問題はネットでは「うそつき天使」問題として紹介しているところがあっ
た。

その解説は本やネットを読んでいただくとして、その本には気になることが書
いている。

> こんなうまい質問を、誰がどうやって思いついたのだろうか。記号論理学
> (論理方程式) の知識を使うと、「相手が正直でもウソツキでも、必ず正し
> い道がわかる」質問を、計算で求めることができるが、求まる質問 R はあ
> まりエレガントではない(しかしこれでもうまくいく)。
> 
> 「『あなたはチャーチルで右の道が天国に行く』か、あるいは『あなたはヒ
> トラーで左の道が天国に行く』かのどちらかが成り立ちますか？」

論理方程式？ そんなものは私は聴いたことがない。野崎昭弘『詭弁論理学』
には参考図書として前原昭二『記号論理読本』の名が上がっているが、それを
読んでみても論理方程式の話はなかった。まぁ、しかし記号論理ならわかるの
で、記号論理で試しに解いてみよう。


** 我流、記号論理方程式

まず、1 で真を 0 で偽 で and をかけ算の ・ で、or を足し算の + で、否
定は私の好みで ' ではなく ¬ を使う。

右の道が天国であるという命題を p とする。p = 1 ならば右の道が天国であ
り、p = 0 ならば左の道が天国である。

質問を q として、チャーチルへの質問を c(q)、ヒトラーへの質問を h(q) と
しよう。求めたいのは c(q) = h(q) = p ということになろう。

チャーチルは素直に返すので、c(0) = 0、c(1) = 1 すなわち c(q) = 1・q。ヒト
ラーはひねくれて返すので、h(0) = 1、h(1) = 0 すなわち h(q) = ¬ q。

ところが c(q) = h(q) でなければならないが、それは 1・q = ¬ q で、これ
は決して成り立たないことになる。これはおかしい。どこがおかしかったかと
いうと、質問には「あなたは」という主語を付けることができるところにある。

これはオブジェクト指向で self や this がデフォルトで渡せることに相当す
る。これを反映すると、質問は単に q ではなくある種の関数となり、求めた
いのは c(q(c)) = h(q(h)) = p ということになる。

これを解いてみよう。c(x) = 1・x、h(x) = ¬ x で変わらないとして、
c(q(c)) = h(q(h)) は 1・(q(1・)) = ¬(q(¬)) となる。簡単にすると、
q(1・) = ¬q(¬) で、これが p に等しいのだから、q(f) = f(p) とすれば良さ
そうだ。

実際 q(1・) = 1・p = p で、¬q(¬) = ¬(¬p) = p で等しくなる。

つまり、q(f) = f(p) が答えになるが、これは一体どういう質問だろう。素直
に解釈すれば「あなたは…右が天国への道か…と聴かれたらどう答えますか」
ということになるだろう。

チャーチルについては、問題ない。ヒトラーについては、右が天国への道か
と聴かれたら、それが正しい場合 いいえ と答えるだろう。だから、そう聴か
れたらどう答えるかに いいえ と答えたら素直に答えたことになるので はい
と答えるということになる。左が天国への道のときも同様である。

結果、ヒトラーでもチャーチルでも、「はい」ならば右が天国への道、「いい
え」ならば左が天国への道となる。

若干、本とは答えが異なるが、同じような質問は求まったと言えよう。


** 本の解答との差

さて、これが「論理方程式」を現代的(?)に私流に解いてみた結果だが、これ
はまったく本の結果と異なる。私は簡単な高階論理を使ったが、昔は、基本、
一階述語論理までのはずであり、どうやって解いたのだろう？

本では、「『あなたはチャーチルで右の道が天国に行く』か、あるいは『あな
たはヒトラーで左の道が天国に行く』かのどちらかが成り立ちますか？」が答
えになるということだった。

これは上の私の表記を使いながら書くと、q(f) = C(f)・p + H(f)・¬p という
ことになる。ここで、C(f) は f が c のときのみ真となる関数すなわち C(f)
= (f = c)。同様に H(f) = (f = h)。

q(f) は f = c のとき、q(c) = C(c)・p + H(c)・¬p = 1・p + 0・¬p = p と
なる。f = h のとき q(h) = C(h)・p + H(h)・¬p = 0・p + 1・¬p = ¬p とな
る。よって f(q(f)) は必ず p になることが示せる。

ではどう方程式を立てるか。それは C(f) の場合の答えを q1、H(f) の場合の
答えを q2 として、q(f) = C(f)・q1 + H(f)・q2 と構成すると決めうちする
ことにする。そして c(q(c)) = q1 = p だから q1 = p、h(q(h)) = ¬q2 = p
だから q2 = ¬p として、求める。…ということだろうか？

なんとなくそんな気がするが、これで正しいかは闇の中である。「記号論理方
程式」は私にとってはすっかり「ロストテクノロジー」である。


** Isabelle で証明チェック

定理証明システム Isabelle の HOL (Higher Order Logic: 高階論理)で我流
の方法を正しいかチェックしてみよう。ソース KennedyProblem1.thy は次の
ようになる。

<source>
theory KennedyProblem1
  imports Main
begin

consts Paradise :: "bool"

datatype angel = Churchill | Hitler

definition churchill :: "bool => bool" where
"churchill x == x"

definition hitler :: "bool => bool" where
"hitler x == ~x"

fun apply_angel :: "angel => bool => bool" where
"apply_angel Churchill x = churchill x" |
"apply_angel Hitler x = hitler x"

definition kennedy_problem :: 
  "((bool => bool) => bool) => bool"
  where
    "kennedy_problem Q == 
ALL x::angel. apply_angel x (Q (apply_angel x)) = Paradise"

lemma kennedy_answer:
  shows "kennedy_problem (% f. f Paradise)"
  apply (unfold kennedy_problem_def)
  apply (intro allI)
  apply (case_tac x)
  apply (simp_all add: churchill_def hitler_def)
  done

end
</source>

我流では、h か c かのどちらかであるというのが、わかっているという暗黙
の前提だったが、そういうことも証明チェックするときは明示的に書き出さね
ばならない。そこで、すべての天使を表す angel という型(集合)に対し、す
べての x::angel についてある文が成り立つという構造にする。

h は hitler で かつ (apply_angel Hitler) に等しい。c は churchill で
(apply_angel Churchill) に等しい。関数型では h(x) の x をはぶいてその
ような表し方ができる。関数 f(x,y) は f x y みたいに書くのが流儀で f x
y = (f x) y となっている。

p は Paradise になっている。質問 Q についての問題が kennedy_problem Q
で表される。答えは Q = (% f. f Paradise) = (λf. f Paradise) すなわち
Q(f) = f Paradise で上の我流と同じものを与えている。

証明はとても簡単で、定義を代入して x を Churchill か Hitler かで総当た
り的にケース分けしてから、simplify するだけである。

Isabelle にはソルバーのようなものも付いてる。EX Q. kennedy_problem Q
というような式を証明する仮定で、自動的に Q が求まらないかともやってみ
たが、私には、自動的に求まるよう導くことはできなかった。

なお、最近の Isabelle は apply を使わない証明がデフォルトのようだが、
私は古い人間なので、apply を使った証明でお茶をにごした。


** 結論

ケネディと天使の問題を Isabelle の高階論理で解いてみたが、元は一階述語
論理的な枠組みで解いているはず、その「記号論理方程式」の技術は、私にとっ
ては、すっかり「ロストテクノロジー」となったのであった。

なお、ケネディと天使の問題は、スターリンという気まぐれ天使の登場によっ
て様相を変える。それはこの次の「その２」に書いている。


** 参考

「その２」「その３」に関する参考文献もここに挙げる。

  * 『詭弁論理学』(野崎 昭弘 著, 中公新書, 1976年・2017年 改版)。今回
    のネタ本。

    https://www.amazon.co.jp/dp/4121804481

  * 《平木研究室 - 「うそつき村 と 正直村 の なぞなぞ」を知っています
    か？》。「うそつき天使」問題・「気まぐれ天使」問題が載っている。
    「うそつき天使」問題には解決編があるが、「気まぐれ天使」問題につい
    てはさらにググる必要があるようだ。

    https://www.osaka-kyoiku.ac.jp/~hiraki/etc/quiz.htm

  * 定理証明システム《Isabelle》。今回使ったのは Isabelle2020 の HOL。
    定理証明システムはいろいろあるが、私は昔取った杵柄で、Isabelle を
    選んだ。これまでは Logics_ZF を使っていた。HOL を使うのはほぼはじ
    めて。

    https://isabelle.in.tum.de/


** ライセンス

パブリックドメイン。 (数式のような小さなプログラムなので。)

自由に改変・公開してください。




    ケネディと天使の問題を Isabelle で証明 その２ 気まぐれ天使問題


** 概要

ケネディと天使の問題、または、うそつき天使問題、気まぐれ天使問題、三人
の天使問題…と言われているものを、定理証明システム Isabelle でその答え
が正しいかチェック(証明)した。

これは「その２」で、気まぐれ天使問題を扱う。


** スターリン登場

野崎昭弘『詭弁論理学』(中公新書)の p.14-16, 148-154 に、「ケネディの問
題」があり、それを「その１」で説明したが、それには続きがある。

> ケネディの問題を、次のように変更してみよう。まず登場人物をチャーチル、
> ヒトラー、スターリンの三人にふやす。そしてチャーチルはいつでも正しい
> ことをいい、ヒトラーはいつでもウソをつくが、スターリンはウソをつくか
> 本当のことをいうか、きまっていないとする。ケネディはこれらのうちの
> (誰ともわからない) 二人に、一回ずつ、「はい」か「いいえ」で答えられ
> る質問をする。三回以上質問をしても、誰も答えてくれない。ケネディは正
> しい道をみつけられるのだろうか？

答えはケネディは正しい道を見つけることができて、その質問は、わからない
なりに三人を A B C とラベル付けした上で、

> 天使 A (誰でもよい) をつかまえて、次のようにきく。
> 
> 「あなたは、『この方(と天使 B を指さしながら) がスターリンですか』と
> きかれたら、『はい』と答えますか？」
> 
> (…)
>
> 前の答が「はい」なら C に、「いいえ」なら B にきく。
>
> 「あなたは『この (右の) 道が天国に行く道であうか』ときかれたら『はい』
> と答えますか？」

…と質問すればよい。これがネットで「気まぐれ天使」問題・三人の天使問題
と言われているものの解答である。


** 記号論理的解答

問題は、スターリンをどう定式化するかである。つまり乱数を返してくるのが
スターリンということになる。これを記号論理という「関数型プログラミング」
の世界でどう表すか？

一つよくやる手が、環境の導入である、今回はそのテでいく。つまり、「何時
何分何秒 経度緯度何分で言った」という子供のあおりがあるが、それを地で
行き、環境(時間・場所)を指定すれば、スターリンと言えど言ったことは一つ
だったはずであるとするのである。

そして、基本、質問はみずに環境だけ見てると考える。スターリン関数 s は、
環境 e について s(e) を返すが、その値はわからないとする。(質問 q につ
いて s(q, e) とすることもできるが、本質的な差はない。)

そして、s(e) がどんな値になるかわからないが成り立つ、というのは、すべ
ての e について成り立つことと定式化する。

最初の質問 Q1 は Q1(f) = f(f = s) ということになる。p1 = f(Q1(f)) とす
ると、何らかの選択関数 ch について y = ch(p1) とし y(Q2(y)) = p となるよ
うにしたいということ。

ch は p1 が真ならば C を 偽ならば B を返す関数で、Q2 は、「その１」の
q に等しく Q1(f) = f(p) とすればいいというのが解答になる。


** Isabelle でのチェック

ここまで難しくなるとチェックしがいがあるというものである。ソース
KennedyProblem2.thy は次のようになる。

<source>
theory KennedyProblem2
  imports Main
begin

typedecl env 

consts Paradise :: "bool"

datatype angel = Churchill | Hitler | Stalin

definition churchill :: "bool => bool" where
"churchill x == x"

definition hitler :: "bool => bool" where
"hitler x == ~x"

consts stalin :: "env => bool"

fun apply_angel :: "angel => env => bool => bool" where
"apply_angel Churchill e x = churchill x" |
"apply_angel Hitler e x = hitler x" |
"apply_angel Stalin e x = stalin e"

definition kennedy_problem ::
  "((bool => bool) => angel => angel => angel => bool) => 
   (bool => nat) => 
   ((bool => bool) => angel => angel => angel => bool) => 
   bool"
  where
"kennedy_problem Q1 C Q2 == 
ALL a::angel. ALL b::angel. ALL c::angel.
  a ~= b & b ~= c & c ~= a
-->
(ALL p1::bool. ALL y::angel.
  ALL e1::env. ALL e2::env. ALL e3::env. ALL e4::env.
  apply_angel a e1 (Q1 (apply_angel a e2) a b c) = p1
  & y = nth [a, b, c] (C p1)
  -->
  apply_angel y e3 (Q2 (apply_angel y e4) a b c) = Paradise)"

lemma kennedy_answer:
  shows "kennedy_problem (%f a b c. f (b = Stalin))
           (%p. if p then 2 else 1) (% f a b c. f Paradise)"
  apply (unfold kennedy_problem_def)
  apply (intro allI)
  apply (case_tac [!] a)
  apply (case_tac [!] b)
  apply (case_tac [!] c)
  apply (simp_all add: churchill_def hitler_def)
  done

end
</source>

apply_angel は「その１」と違い、環境 e::env を取るものとなっている。そ
して A B C は a b c とローカルに表されることになる。その a b c が使え
るように Q1 や Q2 は a b c も引数として取るように変更されている。

しかし、ch は C になっているが、この C は質問を介さないので、a b c の
ことは知らないというのを表現するために、C の結果を何番目かという数値と
して出し、その番号で a b c のうちの一つが選ばれるようになっている。

解答である Q1 f a b c は、f (b = Stalin) に、C p1 は、 if p1 then 2
else 1 に、Q2 f a b c は、f Paradise になっている。

証明はとても簡単で、a b c をそれぞれ Churchill Hitler Stalin に総当り
的に割り当ててから simplify すればよい。


** 結論

Isabelle で「気まぐれ天使」問題の解答をチェックした。

a b c が誰かを「知らない」ということを a b c を「区別できない」まます
べての a b c について成り立つと表現しているのがおもしろい。さらに、
「知らない」というのは C が a b c を直接使わないことで表現されているの
もおもしろい。

また stalin 関数の詳しい内容が定義されていなくても、それが使われないよ
うに消えるので問題ないというのもおもしろい。

「その３」では気まぐれ天使問題について、悪戦苦闘した経緯を話したい。た
だ、そこは「失敗」が語られるだけなので、普通の人は、この「その２」まで
で十分かもしれない。



    ケネディと天使の問題を Isabelle で証明 その３ 悪戦苦闘編


** 概要

ケネディと天使の問題、または、うそつき天使問題、気まぐれ天使問題、三人
の天使問題…と言われているものを、定理証明システム Isabelle でその答え
が正しいかチェック(証明)した。

これは「その３」で、気まぐれ天使問題について悪戦苦闘した私の「失敗」を
扱う。


** ブラックボックス登場

野崎昭弘『詭弁論理学』(中公新書)の p.14-16, 148-154 に、「ケネディの問
題」があり、その「うそつき天使」問題を「その１」で、「気まぐれ天使」問
題を「その２」で説明した。

さて、スターリンが登場した「気まぐれ天使」問題を記号論理で解くには紆余
曲折があった。

私はずっと以前、大学院にいたころ、PTS (Pure Type System) にブラックボッ
クス ■ を導入することを考えたことがある。

ある P の証明 p があるとき、Γ |- p : P となるのだが、このとき p は何
でも良いので、Γ |- ■ : P と書くとする。そして、Γ |- (λx:A. ■) :
(Π x:A. P) となったとしたら、これも Γ |- ■: (Π x:A. P) と書き換え
てよいとする。結果 (λx. ■) = ■、■(f) = ■ などとしていくわけである。

結果、■ はなんだかわらかないがとにかくそこにある「ブラックボックス」
を表す。こういうのを導入してもいいはずだ…と考えていた。

今回のスターリンはまさに、■ だ！ というのが最初の直感だった。しかし、
問題が出てくる。B がスターリンかどうかを尋ねるというのが解答に出てくる
が、それは B が ■ かどうかを問うということ。これが難しいのだ。


** ホワイトボックス登場

ある x が ■ なら真となる関数を □(x) と定義しよう。簡単に □x と書く。

ところが、■というのは「メタレベル」の話であって、それを判定する□はメ
タに判定しなければならないのに、それを地のロジックで使うとなれば、当然
に矛盾が出てくる。

つまり、Γ |- a: B とすると、Γ |- ■: B ということだった。今、□ で判
定できるということだから、Γ |- ■ : ¬□ a、Γ |- ■ : □ ■ でなけれ
ばならないということになる。

Γ = Δ, a: B だったとすると、Δ |- ■: (Π a:B. ¬□ a) になるが、Γ
|- ■: B だったから Γ |- ■■: ¬□ ■ で、これは Γ |- ■: ¬□ ■ に
なる。これは Γ |- ■ : □ ■ と矛盾する。


** 矛盾を生じないようにするには？

矛盾を生じないようにするにはどうすればよいのだろうか？

問題は、¬□ a の a に ■ を代入するときに起きていると考えれば、de
Bruijn 表記法のようなものを □ ■ に導入することが考えられる。

つまり、□ = □_0、 ■ = ■_0 だったとして、□_0 a の a に ■_0 代入し
ようと思えば 0 がぶつかるため、■ の数値を増やさねばならない。よって、
¬ □_0 a [a:= ■_0] = ¬ □_0 ■_1 と考え、これは ¬ □_0 ■_0 とは別の
ものと考えるのである。

…ただ、これが、ちゃんと無矛盾なロジックになっているかは、確認していな
い。


** スマートな方法

ここまで考えたところで、de Bruijn 表記法がいるってことは変数書き換えが
必要なんだな…といったところから、「その２」に述べたような環境を変数に
取ることを考えついた。

逆に言えば、■ は、環境を変数に扱うような意味論で定式化できるのかもし
れない…と直感的には思う。上で見るようにあてにならない直感だが。


** 結論

昔考えた「ブラックボックス」が正しかったのかさえ、疑問に思うようになっ
た。

ここまで読んでいただきありがとうございます。


(This document is mainly written in Japanese/UTF8.)
